diff --git a/node_modules/alsong/src/resolvers/v2/index.js b/node_modules/alsong/src/resolvers/v2/index.js
index 3762f9b..9a12155 100644
--- a/node_modules/alsong/src/resolvers/v2/index.js
+++ b/node_modules/alsong/src/resolvers/v2/index.js
@@ -1,4 +1,4 @@
-const axios = require('axios');
+const {  Agent  } = require('undici');
 
 const AlsongResolver = require('../AlsongResolver');
 const AlsongV2Converter = require('./converter');
@@ -22,20 +22,22 @@ encKey.importKey({
 	e: 65537
 }, 'components-public');
 
+const baseApiUrl = 'https://lyric.altools.com';
+const headers = {
+  'Accept-Charset': 'utf-8',
+  'Content-Type': 'application/x-www-form-urlencoded',
+  'User-Agent': 'android'
+};
+const agent = new Agent({
+  connect: {
+    rejectUnauthorized: false,
+  },
+});
+
 const AlsongV2 = {
 	...AlsongResolver,
 	encKey,
 	
-	api: axios.create({
-		baseURL: 'https://lyric.altools.com',
-		headers: {
-			'Accept-Charset': 'utf-8',
-			'Connection': 'close',
-			'Content-Type': 'application/x-www-form-urlencoded'
-		},
-		responseType: 'json'
-	}),
-	
 	converter: AlsongV2Converter,
 	
 	getEncData() {
@@ -68,10 +70,18 @@ const AlsongV2 = {
 		params.append('encData', this.getEncData());
 		
 		try {
-			const { data } = await this.api.post('/v1/search', params);
-			return data;
+			const data = await fetch(`${baseApiUrl}/v1/search`, {
+        method: 'POST',
+        body: params,
+        headers,
+        dispatcher: agent,
+      });
+      if (data.status === 404) {
+        return null;
+      }
+			return await data.json();
 		} catch(err) {
-			throw new Error("Alsong: Wrong response from server: " + err.message);
+			throw new Error("Alsong: Wrong response from server: " + err);
 		}
 	},
 	
@@ -81,14 +91,18 @@ const AlsongV2 = {
 		params.append('encData', this.getEncData());
 		
 		try {
-			const { data } = await this.api.post('/v1/info', params);
-			return data;
+			const  data  = await fetch(`${baseApiUrl}/v1/info`, {
+        method: 'POST',
+        body: params,
+        headers,
+        dispatcher: agent,
+      });
+      if (data.status === 404) {
+        return null;
+      }
+			return await data.json();
 		} catch(err) {
-			if (err.response && err.response.status === 404) {
-				return null;
-			}
-			
-			throw new Error("Alsong: Wrong response from server: " + err.message);
+			throw new Error("Alsong: Wrong response from server: " + err);
 		}
 	},
 
@@ -98,14 +112,18 @@ const AlsongV2 = {
 		params.append('encData', this.getEncData());
 		
 		try {
-			const { data } = await this.api.post('/v1/lookup', params);
-			return data;
+			const  data  = await fetch(`${baseApiUrl}/v1/lookup`, {
+        method: 'POST',
+        body: params,
+        headers,
+        dispatcher: agent,
+      });
+      if (data.status === 404) {
+return null;
+      }
+			return await data.json();
 		} catch(err) {
-			if (err.response && err.response.status === 404) {
-				return null;
-			}
-			
-			throw new Error("Alsong: Wrong response from server: " + err.message);
+			throw new Error("Alsong: Wrong response from server: " + err);
 		}
 	}
 };
diff --git a/node_modules/alsong/src/utils/LyricUtils.js b/node_modules/alsong/src/utils/LyricUtils.js
index 2a636c6..201bf00 100644
--- a/node_modules/alsong/src/utils/LyricUtils.js
+++ b/node_modules/alsong/src/utils/LyricUtils.js
@@ -1,18 +1,27 @@
 const LyricUtils = {
-	parseLyric(lyric) {
-		const lyrics = {};
-		lyric.split('<br>').forEach(v => {
-			const match = v.match(/^\[(\d+):(\d\d).(\d\d)\](.*)$/);
-			if (!match) return;
+  parseLyric(lyric) {
+    /**
+     * @type Record<number, string[]>
+     */
+    const lyrics = {};
+    const regex = /\[(\d+):(\d\d).(\d\d)\]([^<]+)/g;
+    let match;
 
-			const timestamp = 10 * (parseInt(match[1]) * 60 * 100 + parseInt(match[2]) * 100 + parseInt(match[3]));
-			if(!lyrics[timestamp]) lyrics[timestamp] = [];
+    while ((match = regex.exec(lyric))) {
+      const minutes = parseInt(match[1]);
+      const seconds = parseInt(match[2]);
+      const milliseconds = parseInt(match[3]);
+      const timestamp = 10 * (minutes * 60 * 100 + seconds * 100 + milliseconds);
 
-			lyrics[timestamp].push(match[4]);
-		});
+      if (!lyrics[timestamp]) {
+        lyrics[timestamp] = [];
+      }
 		
-		return lyrics;
-	}
+      lyrics[timestamp].push(match[4]);
+    }
+
+    return lyrics;
+  },
 };
 
 module.exports = LyricUtils;
\ No newline at end of file
